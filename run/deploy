#! /usr/bin/env node

require('console-ultimate/global').replace()

var args = require('minimist')(process.argv.slice(2),
{
	string:
	[
		'env',
		'key'
	]
})

var env = args.env

if (! env)
{
	console.error('--env must be present')
	process.exit(1)
}

var cmd = require('command-promise')
var partial = require('lodash/partial')

var ssh = partial(cmd, 'ssh')
var scp = partial(cmd, 'scp')

var key = args.key

if (key)
{
	ssh = partial(ssh, [ '-i', key ])
	scp = partial(scp, [ '-i', key ])
}

var remote = 'ubuntu@ec2-52-38-31-214.us-west-2.compute.amazonaws.com'


var f = require('util').format
var load = require('fs-sync').readJSON
var write = require('fs-sync').write
var rootpath = require('rootpath')(__dirname, '..')
var merge = require('lodash').merge


function remote_rootpath (path)
{
	return 'netvest/' + env + '/' + (path || '')
}

function target (path)
{
	return remote + ':' + remote_rootpath(path)
}

function dump (path, config)
{
	config = JSON.stringify(config, null, '  ')

	write(path, config)
}


Promise.resolve()
.then(() =>
{
	return scp(rootpath('package.json'), target())
})
.then(() =>
{
	return scp('-r', rootpath('api'), target())
})
.then(() =>
{
	return scp('-r', rootpath('db'), target())
})
.then(() =>
{
	return scp('-r', rootpath('src'), target())
})
.then(() =>
{
	return ssh(remote, f('"mkdir -p %s"', remote_rootpath('cfg/')))
})
.then(() =>
{
	var base = load(rootpath('cfg/config.json'))
	var cenv = load(rootpath('cfg/env', env + '.json'))

	var config = merge({}, base, cenv)

	var tmp = rootpath('var/deploy-config.json')
	dump(tmp, config)

	return scp(tmp, target('cfg/config.json'))
})
.then(console.log)
.catch(console.error)
