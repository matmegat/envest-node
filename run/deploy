#! /usr/bin/env node

require('console-ultimate/global').replace()

var f = require('util').format
var home = require('home').resolve

var fs = require('fs-sync')
var read  = fs.read
var write = fs.write

var get_env = require('./lib/get-env')
var slack = require('./lib/slack')

var args = require('minimist')(process.argv.slice(2),
{
	string:
	[
		'env',
		'key'
	]
})

var env = get_env(args) /* @shortcut */

var cmd = require('command-promise')
var partial = require('lodash/partial')

// rsync -v -r --delete -e "ssh -i ${HOME}/.ssh/WeezLabsDev.pem" db/
// ... ubuntu@ec2-52-38-31-214.us-west-2.compute.amazonaws.com:/home/ubuntu/netvest/dev/db

var ssh = partial(cmd, 'ssh')
var scp = partial(cmd, 'scp')

var rsync = partial(cmd, 'rsync')

var key = args.key

if (key)
{
	ssh = partial(ssh, [ '-i', key ])
	scp = partial(scp, [ '-i', key ])

	var fkey = home(key)
	fkey = f('"ssh -i %s"', fkey)

	rsync = partial(rsync, [ '-e', fkey ])
}


var remote_config = get_env.remote(env) /* @shortcut */
var remote = remote_config.remote
var remote_with_user = 'ubuntu@' + remote


ssh = partial(ssh, remote_with_user)
rsync = partial(rsync, '--recursive')
rsync_clean = partial(rsync, '--delete')

function outputify (name, fn)
{
	return function ()
	{
		console.info('START', name)

		var r = new Promise(rs =>
		{
			rs(fn.apply(this, arguments))
		})

		return r.then(() =>
		{
			console.info('READY', name)

			return r
		})
	}
}


var rootpath = require('rootpath')(__dirname, '..')
var merge = require('lodash').merge

var tmp = require('rootpath')(require('os').tmpdir())


function remote_rootpath (path)
{
	return 'netvest/' + env + '/' + (path || '')
}

function target (path)
{
	return remote_with_user + ':' + remote_rootpath(path)
}


var load  = fs.readJSON

function dump (path, config)
{
	config = JSON.stringify(config, null, '  ')

	write(path, config)
}


function rev ()
{
	return cmd('git describe --always --long --abbrev=16 --dirty')
	.then(cmd.util.stdout)
	.then(cmd.util.trim)
	.then(rev =>
	{
		return cmd("git log --pretty='[%an] %s' -1")
		.then(cmd.util.stdout)
		.then(cmd.util.trim)
		.then(logmsg =>
		{
			return rev + ' ' + logmsg
		})
	})
}


get_env.confirm(remote_config, env) /* @shortcut */
.then(so =>
{
	return rev()
})
.then(fullrev =>
{
	var tmp_rev = tmp('netvest-REV')

	write(tmp_rev, fullrev)

	return scp(tmp_rev, target('REV'))
})
.then(outputify('copy package.json', () =>
{
	return scp(rootpath('package.json'), target())
}))
.then(outputify('copy db/', () =>
{
	return rsync_clean(rootpath('db') + '/', target('db'))
}))
.then(outputify('copy static/', () =>
{
	return rsync(
		[ '--exclude', '/images' ],
		rootpath('static') + '/',
		target('static')
	)
}))
.then(outputify('copy src/', () =>
{
	return rsync_clean(rootpath('src') + '/', target('src'))
}))
.then(() =>
{
	return ssh(f("'mkdir -p %s'", remote_rootpath('cfg/')))
})
.then(outputify('compile config, copy cfg/', () =>
{
	var base = load(rootpath('cfg/config.json'))
	var cenv = load(rootpath('cfg/env', env + '.json'))

	var config = merge({}, base, cenv)

	var tmp_f = tmp('netvest-deploy-config.json')
	dump(tmp_f, config)

	return scp(tmp_f, target('cfg/config.json'))
	.then(() => config)
}))
.then(config =>
{
	if (! config.nginx)
	{
		return
	}

	return outputify('compile nginx config, copy cfg/', () =>
	{
		var render = require('mustache').render

		var template = read(rootpath('cfg/env/_nginx.conf'))
		var port = config.port

		var rendered = render(template,
		{
			env:  env,
			port: port,
			port_nginx: port - 1
		})

		var tmp_f = tmp('netvest-deploy-nginx.conf')
		write(tmp_f, rendered)

		return scp(tmp_f, target('cfg/nginx.conf'))
	})()
	.then(outputify('put ref to nginx/conf.d', () =>
	{
		var tmp_f_local = 'netvest-deploy-nginx-ref.conf'
		var tmp_f = tmp(tmp_f_local)

		var rendered = `include /home/ubuntu/netvest/${env}/cfg/nginx.conf;\n`

		write(tmp_f, rendered)

		var target_etc = `${remote_with_user}:/tmp/${tmp_f_local}`

		return scp(tmp_f, target_etc)
		.then(() =>
		{
			var from = `/tmp/${tmp_f_local}`
			var to = `/etc/nginx/conf.d/netvest-${env}.conf`
			return ssh(`sudo mv ${from} ${to}`)
		})
	}))
})
.then(() =>
{
	return ssh(f('"mkdir -p %s"', remote_rootpath('var/')))
})
.then(outputify('run remote', () =>
{
	return ssh(
		f( '"cd %s;'
		 + ' npm install --production --no-optional;'
		 + 'sudo npm run restart;'
		 + 'sudo nginx -s reload || true;"', remote_rootpath()
	))
}))
.then(() =>
{
	console.info('OK')

	return

	rev()
	.then(fullrev =>
	{
		/* return */ slack.success(env, fullrev)
	})
})
.catch(error =>
{
	console.log(1)
	console.error(error)
	console.error(error.stack)

	return

	slack.failure(env)
	.then(() =>
	{
		process.exit(1)
	})
})
