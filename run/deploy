#! /usr/bin/env node

require('console-ultimate/global').replace()

var f = require('util').format
var home = require('home').resolve
var tmp = require('os').tmpdir

var fs = require('fs-sync')
var load  = fs.readJSON
var write = fs.write

var slack = require('./lib/slack')


var args = require('minimist')(process.argv.slice(2),
{
	string:
	[
		'env',
		'key'
	]
})

var env = args.env

if (! env)
{
	console.error('--env must be present')
	process.exit(1)
}

var cmd = require('command-promise')
var partial = require('lodash/partial')

// rsync -v -r --delete -e "ssh -i ${HOME}/.ssh/WeezLabsDev.pem" db/ ubuntu@ec2-52-38-31-214.us-west-2.compute.amazonaws.com:/home/ubuntu/netvest/dev/db

var ssh = partial(cmd, 'ssh')
var scp = partial(cmd, 'scp')

var rsync = partial(cmd, 'rsync')

var key = args.key

if (key)
{
	ssh = partial(ssh, [ '-i', key ])
	scp = partial(scp, [ '-i', key ])

	var fkey = home(key)
	fkey = f('"ssh -i %s"', fkey)

	rsync = partial(rsync, [ '-e', fkey ])
}

var remote = 'ubuntu@ec2-52-38-31-214.us-west-2.compute.amazonaws.com'

ssh = partial(ssh, remote)
rsync = partial(rsync, '--recursive', '--delete')

function outputify (name, fn)
{
	return () =>
	{
		console.info('START', name)

		var r = fn.apply(this, arguments)

		return r.then(() =>
		{
			console.info('READY', name)

			return r
		})
	}
}


var rootpath = require('rootpath')(__dirname, '..')
var merge = require('lodash').merge


function remote_rootpath (path)
{
	return 'netvest/' + env + '/' + (path || '')
}

function target (path)
{
	return remote + ':' + remote_rootpath(path)
}

function dump (path, config)
{
	config = JSON.stringify(config, null, '  ')

	write(path, config)
}

function rev ()
{
	return cmd('git describe --always --long --abbrev=16 --dirty')
	.then(cmd.util.stdout)
	.then(cmd.util.trim)
	.then(rev =>
	{
		return cmd("git log --pretty='[%an] %s' -1")
		.then(cmd.util.stdout)
		.then(cmd.util.trim)
		.then(logmsg =>
		{
			return rev + ' ' + logmsg
		})
	})
}


rev()
.then(fullrev =>
{
	var tmprev = tmp() + '/netvest-REV'

	write(tmprev, fullrev)

	return scp(tmprev, target('REV'))
})
.then(outputify('copy package.json', () =>
{
	return scp(rootpath('package.json'), target())
}))
.then(outputify('copy db/', () =>
{
	return rsync(rootpath('db') + '/', target('db'))
}))
.then(outputify('copy src/', () =>
{
	return rsync(rootpath('src') + '/', target('src'))
}))
.then(() =>
{
	return ssh(f("'mkdir -p %s'", remote_rootpath('cfg/')))
})
.then(outputify('compile config, copy cfg/', () =>
{
	var base = load(rootpath('cfg/config.json'))
	var cenv = load(rootpath('cfg/env', env + '.json'))

	var config = merge({}, base, cenv)

	var tmp = rootpath('var/deploy-config.json')
	dump(tmp, config)

	return scp(tmp, target('cfg/config.json'))
}))
.then(() =>
{
	return ssh(f('"mkdir -p %s"', remote_rootpath('var/')))
})
.then(outputify('run remote', () =>
{
	return ssh(
		f( '"cd %s;'
		 + ' npm install --production --no-optional;'
		 + 'sudo npm run restart"', remote_rootpath()
	))
}))
.then(() =>
{
	console.info('OK')

	rev()
	.then(fullrev =>
	{
		/* return */ slack.success(env, fullrev)
	})
})
.catch(error =>
{
	console.error(error)

	slack.failure(env)
	.then(() =>
	{
		process.exit(1)
	})
})
